{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-12T22:52:27.891Z",
    "end": "2024-12-12T22:52:34.330Z",
    "duration": 6439,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "421d256a-b963-4451-a035-f3b737f39f4e",
      "title": "",
      "fullFile": "/Users/carosoto/Documentos/Proyectos/itunes-back-main/tests/frontend/reproduction.spec.js",
      "file": "/tests/frontend/reproduction.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "efee3b60-26dc-4ef0-9966-9a014583503d",
          "title": "Pruebas de Reproducción - Información de Bandas Musicales",
          "fullFile": "/Users/carosoto/Documentos/Proyectos/itunes-back-main/tests/frontend/reproduction.spec.js",
          "file": "/tests/frontend/reproduction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pruebas de Reproducción - Información de Bandas Musicales\"",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales \"before all\" hook in \"Pruebas de Reproducción - Información de Bandas Musicales\"",
              "timedOut": false,
              "duration": 1622,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "38f39a04-ce4f-4d9b-bef7-96fbe9962c88",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pruebas de Reproducción - Información de Bandas Musicales\"",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales \"before each\" hook in \"Pruebas de Reproducción - Información de Bandas Musicales\"",
              "timedOut": false,
              "duration": 117,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Realiza la búsqueda inicial de \"Iron Maiden\" antes de cada prueba\nawait driver.get('http://localhost:8080');\nconst searchInput = await driver.findElement(By.css('input[type=\"text\"]'));\nawait searchInput.clear();\nawait searchInput.sendKeys('Iron Maiden');\nconst searchButton = await driver.findElement(By.css('button'));\nawait searchButton.click();\nawait driver.wait(until.elementLocated(By.css('table tbody tr')), 5000);",
              "err": {},
              "uuid": "00bc0d82-e618-4d47-af79-8365f93e22bb",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pruebas de Reproducción - Información de Bandas Musicales\"",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales \"after all\" hook in \"Pruebas de Reproducción - Información de Bandas Musicales\"",
              "timedOut": false,
              "duration": 59,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "1a9324ad-a8ae-4f1e-a629-9bd716308995",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GL-FR-09: Debe reproducir la previsualización de una canción",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales GL-FR-09: Debe reproducir la previsualización de una canción",
              "timedOut": false,
              "duration": 3030,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const audioElement = await obtenerElementoAudioPrimeraCancion();\n  \n// Forzar reproducción\nawait driver.executeScript(\"arguments[0].play();\", audioElement);\n  \n// Validar que la canción no está en pausa\nconst isPaused = await driver.executeScript(\"return arguments[0].paused;\", audioElement);\nassert.strictEqual(isPaused, false, 'La canción debe estar reproduciéndose.');\n  \n// Esperar 3 segundos para confirmar que el tiempo de reproducción avanza\nconst startTime = await driver.executeScript(\"return arguments[0].currentTime;\", audioElement);\nawait driver.sleep(3000); // Pausa de 3 segundos\nconst endTime = await driver.executeScript(\"return arguments[0].currentTime;\", audioElement);\n  \nassert.ok(endTime > startTime, 'El tiempo de reproducción debe avanzar.');\nconsole.log(`Tiempo inicial: ${startTime}, Tiempo final: ${endTime}`);",
              "err": {},
              "uuid": "abb23322-6fbf-40f4-9230-86738ba46198",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GL-FR-10: Debe comenzar a descargar una canción",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales GL-FR-10: Debe comenzar a descargar una canción",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const audioElement = await obtenerElementoAudioPrimeraCancion();\nconst src = await audioElement.getAttribute('src'); // Obtener el enlace del audio\nassert.ok(src.includes('.m4a'), 'El enlace de descarga debe ser válido y apuntar a un archivo de audio.');\nconst axios = require('axios'); \nconst response = await axios.head(src);\n  assert.strictEqual(response.status, 200, 'El archivo de audio debe ser accesible para descarga.');",
              "err": {},
              "uuid": "4579abb9-a238-4280-9a94-f356452d7183",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GL-FR-11: Debe cambiar la velocidad de reproducción",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales GL-FR-11: Debe cambiar la velocidad de reproducción",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const audioElement = await obtenerElementoAudioPrimeraCancion();\nawait driver.executeScript(\"arguments[0].play();\", audioElement); // Reproducir la canción\n// Cambiar velocidad de reproducción\nawait driver.executeScript(\"arguments[0].playbackRate = 1.5;\", audioElement);\nconst playbackRate = await driver.executeScript(\"return arguments[0].playbackRate;\", audioElement);\nassert.strictEqual(playbackRate, 1.5, 'La velocidad de reproducción debe ser 1.5x.');",
              "err": {},
              "uuid": "ae594ebe-0edb-4f60-a157-fdc5bc21de47",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GL-FR-12: Debe detener la reproducción de la canción",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales GL-FR-12: Debe detener la reproducción de la canción",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const audioElement = await obtenerElementoAudioPrimeraCancion();\nawait driver.executeScript(\"arguments[0].play();\", audioElement); // Reproducir la canción\n// Detener la canción\nawait driver.executeScript(\"arguments[0].pause();\", audioElement);\nconst isPaused = await driver.executeScript(\"return arguments[0].paused;\", audioElement);\nassert.strictEqual(isPaused, true, 'La canción debe estar detenida.');",
              "err": {},
              "uuid": "7b99c624-35bb-4a46-84ef-36c9327c8799",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GL-FR-13: Debe silenciar la reproducción de la canción",
              "fullTitle": "Pruebas de Reproducción - Información de Bandas Musicales GL-FR-13: Debe silenciar la reproducción de la canción",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const audioElement = await obtenerElementoAudioPrimeraCancion();\nawait driver.executeScript(\"arguments[0].play();\", audioElement); // Reproducir la canción\n// Silenciar el audio\nawait driver.executeScript(\"arguments[0].muted = true;\", audioElement);\nconst isMuted = await driver.executeScript(\"return arguments[0].muted;\", audioElement);\nassert.strictEqual(isMuted, true, 'El audio debe estar silenciado.');",
              "err": {},
              "uuid": "bc1a9f58-0bfd-4218-b710-4770be2f9fa4",
              "parentUUID": "efee3b60-26dc-4ef0-9966-9a014583503d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "abb23322-6fbf-40f4-9230-86738ba46198",
            "4579abb9-a238-4280-9a94-f356452d7183",
            "ae594ebe-0edb-4f60-a157-fdc5bc21de47",
            "7b99c624-35bb-4a46-84ef-36c9327c8799",
            "bc1a9f58-0bfd-4218-b710-4770be2f9fa4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3378,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome-report-20241212195227",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "mochawesome-report-20241212195227"
      },
      "version": "6.2.0"
    }
  }
}